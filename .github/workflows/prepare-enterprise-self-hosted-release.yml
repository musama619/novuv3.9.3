name: Prepare Enterprise Self-hosted Release
run-name: >
  Building enterprise v${{ github.event.inputs.version }}:
  ${{
    github.event.inputs.build_api == 'true' && 'api, ' || ''
  }}${{
    github.event.inputs.build_worker == 'true' && 'worker, ' || ''
  }}${{
    github.event.inputs.build_dashboard == 'true' && 'dashboard, ' || ''
  }}${{
    github.event.inputs.build_ws == 'true' && 'ws ' || ''
  }}

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      build_api:
        description: 'Build API service'
        required: true
        type: boolean
        default: true
      build_worker:
        description: 'Build Worker service'
        required: true
        type: boolean
        default: true
      build_dashboard:
        description: 'Build Dashboard service'
        required: true
        type: boolean
        default: true
      build_ws:
        description: 'Build WebSocket service'
        required: true
        type: boolean
        default: true


permissions:
  contents: write
  packages: write
  deployments: write
  id-token: write

jobs:
  setup_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Validate Selected Services
        run: |
          if [ "${{ github.event.inputs.build_api }}" != "true" ] && \
             [ "${{ github.event.inputs.build_worker }}" != "true" ] && \
             [ "${{ github.event.inputs.build_dashboard }}" != "true" ] && \
             [ "${{ github.event.inputs.build_ws }}" != "true" ]; then
            echo "Error: At least one service must be selected for building."
            exit 1
          fi

      - name: Generate Build Matrix
        id: set-matrix
        run: |
          services=()

          if [ "${{ github.event.inputs.build_api }}" == "true" ]; then
            services+=("\"api-ee\"")
          fi
          if [ "${{ github.event.inputs.build_worker }}" == "true" ]; then
            services+=("\"worker-ee\"")
          fi
          if [ "${{ github.event.inputs.build_dashboard }}" == "true" ]; then
            services+=("\"dashboard-ee\"")
          fi
          if [ "${{ github.event.inputs.build_ws }}" == "true" ]; then
            services+=("\"ws-ee\"")
          fi

          matrix="[$(IFS=','; echo "${services[*]}")]"

          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "Building services: $matrix"

  build_docker:
    needs: setup_matrix
    runs-on: ubuntu-latest
    timeout-minutes: 90
    environment: Production
    strategy:
      fail-fast: false
      matrix:
        name: ${{ fromJson(needs.setup_matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
          token: ${{ secrets.SUBMODULES_TOKEN }}

      - name: Variables
        shell: bash
        run: |
          SERVICE_NAME="${{ matrix.name }}"
          LATEST_VERSION="${{ github.event.inputs.version }}"
          SERVICE_COMMON_NAME=$(echo "$SERVICE_NAME" | sed 's/-ee$//')
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          echo "SERVICE_COMMON_NAME=$SERVICE_COMMON_NAME" >> $GITHUB_ENV
          echo "This is the service name: $SERVICE_NAME and release version: $LATEST_VERSION"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.11.0
          run_install: false

      - name: Setup Node Version
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'
          cache: 'pnpm'

      - name: Install Dependencies
        shell: bash
        run: pnpm install --frozen-lockfile

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: 'image=moby/buildkit:v0.13.1'

      - name: Prepare Variables
        run: echo "BULL_MQ_PRO_NPM_TOKEN=${{ secrets.BULL_MQ_PRO_NPM_TOKEN }}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        shell: bash
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: novu
          SERVICE: ${{ env.SERVICE_NAME }}
          IMAGE_TAG: ${{ env.LATEST_VERSION }}
          DOCKER_BUILD_ARGUMENTS: >
            --platform=linux/amd64
            --output=type=image,name=$REGISTRY/$REPOSITORY/$SERVICE,push-by-digest=true,name-canonical=true
        run: |
          cp scripts/dotenvcreate.mjs apps/$SERVICE_COMMON_NAME/src/dotenvcreate.mjs
          cd apps/$SERVICE_COMMON_NAME

          if [[ "$SERVICE_COMMON_NAME" =~ ^(api|worker|ws)$ ]]; then
            cd src/ && echo -e "\nIS_SELF_HOSTED=true\nNOVU_ENTERPRISE=true" >> .example.env && cd ..
          fi

          # Switch from PM2 cluster mode to single node process to support K8s deployments
          if [[ "$SERVICE_COMMON_NAME" =~ ^(api|worker|ws)$ ]]; then
            echo "Switching $SERVICE_COMMON_NAME from PM2 cluster mode to single node process to support K8s deployments"
            sed -i.bak 's/pm2-runtime start dist\/main\.js -i max/node dist\/main.js/g' Dockerfile && rm -f Dockerfile.bak
          fi

          pnpm run docker:build
          docker tag novu-$SERVICE_COMMON_NAME $REGISTRY/$REPOSITORY/$SERVICE:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY/$SERVICE:$IMAGE_TAG

      - name: Output image details
        run: |
          echo "Successfully built and pushed:"
          echo "  - $REGISTRY/novu/$SERVICE_NAME:$IMAGE_TAG"
          echo "Platform: linux/amd64 (x86)"
          echo "Type: Enterprise Self-hosted"
