import {
  ChannelTypeEnum,
  ISendMessageSuccessResponse,
  I<%= pascalType %>Options,
  I<%= pascalType %>Provider,
} from '@novu/stateless';
import { BaseProvider, CasingEnum  } from '../../../base.provider';
import { WithPassthrough } from '../../../utils/types';

export class <%= pascalName %><%= pascalType %>Provider extends BaseProvider implements I<%= pascalType %>Provider {
  id = '<%= name %>';
  channelType = ChannelTypeEnum.<%= upperType %> as ChannelTypeEnum.<%= upperType %>;
  protected casing: CasingEnum = CasingEnum.CAMEL_CASE;

  constructor(
    private config: {
      <%= upperType === 'EMAIL' ? 'apiKey: string;' : null %>
    }
  ) {
    super();
  }

  async sendMessage(
    options: I<%= pascalType %>Options,
    bridgeProviderData: WithPassthrough<Record<string, unknown>> = {}
  ): Promise<ISendMessageSuccessResponse> {
    const data = this.transform(bridgeProviderData, options);


    return {
      id: 'id_returned_by_provider',
      date: 'current_time'
    };
  }
}
