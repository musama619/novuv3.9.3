/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ActivityControllerGetWorkflowRunRequest = {
  workflowRunId: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

/** @internal */
export const ActivityControllerGetWorkflowRunRequest$inboundSchema: z.ZodType<
  ActivityControllerGetWorkflowRunRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  workflowRunId: z.string(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type ActivityControllerGetWorkflowRunRequest$Outbound = {
  workflowRunId: string;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const ActivityControllerGetWorkflowRunRequest$outboundSchema: z.ZodType<
  ActivityControllerGetWorkflowRunRequest$Outbound,
  z.ZodTypeDef,
  ActivityControllerGetWorkflowRunRequest
> = z.object({
  workflowRunId: z.string(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityControllerGetWorkflowRunRequest$ {
  /** @deprecated use `ActivityControllerGetWorkflowRunRequest$inboundSchema` instead. */
  export const inboundSchema =
    ActivityControllerGetWorkflowRunRequest$inboundSchema;
  /** @deprecated use `ActivityControllerGetWorkflowRunRequest$outboundSchema` instead. */
  export const outboundSchema =
    ActivityControllerGetWorkflowRunRequest$outboundSchema;
  /** @deprecated use `ActivityControllerGetWorkflowRunRequest$Outbound` instead. */
  export type Outbound = ActivityControllerGetWorkflowRunRequest$Outbound;
}

export function activityControllerGetWorkflowRunRequestToJSON(
  activityControllerGetWorkflowRunRequest:
    ActivityControllerGetWorkflowRunRequest,
): string {
  return JSON.stringify(
    ActivityControllerGetWorkflowRunRequest$outboundSchema.parse(
      activityControllerGetWorkflowRunRequest,
    ),
  );
}

export function activityControllerGetWorkflowRunRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ActivityControllerGetWorkflowRunRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ActivityControllerGetWorkflowRunRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ActivityControllerGetWorkflowRunRequest' from JSON`,
  );
}
