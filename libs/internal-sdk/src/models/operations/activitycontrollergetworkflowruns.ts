/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const QueryParamStatuses = {
  Pending: "pending",
  Success: "success",
  Error: "error",
} as const;
export type QueryParamStatuses = ClosedEnum<typeof QueryParamStatuses>;

export type ActivityControllerGetWorkflowRunsRequest = {
  limit?: number | undefined;
  cursor?: string | undefined;
  workflowIds?: Array<string> | undefined;
  subscriberIds?: Array<string> | undefined;
  transactionIds?: Array<string> | undefined;
  statuses?: Array<QueryParamStatuses> | undefined;
  channels?: Array<string> | undefined;
  topicKey?: string | undefined;
  createdGte?: string | undefined;
  createdLte?: string | undefined;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

/** @internal */
export const QueryParamStatuses$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamStatuses
> = z.nativeEnum(QueryParamStatuses);

/** @internal */
export const QueryParamStatuses$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamStatuses
> = QueryParamStatuses$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamStatuses$ {
  /** @deprecated use `QueryParamStatuses$inboundSchema` instead. */
  export const inboundSchema = QueryParamStatuses$inboundSchema;
  /** @deprecated use `QueryParamStatuses$outboundSchema` instead. */
  export const outboundSchema = QueryParamStatuses$outboundSchema;
}

/** @internal */
export const ActivityControllerGetWorkflowRunsRequest$inboundSchema: z.ZodType<
  ActivityControllerGetWorkflowRunsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().default(10),
  cursor: z.string().optional(),
  workflowIds: z.array(z.string()).optional(),
  subscriberIds: z.array(z.string()).optional(),
  transactionIds: z.array(z.string()).optional(),
  statuses: z.array(QueryParamStatuses$inboundSchema).optional(),
  channels: z.array(z.string()).optional(),
  topicKey: z.string().optional(),
  createdGte: z.string().optional(),
  createdLte: z.string().optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type ActivityControllerGetWorkflowRunsRequest$Outbound = {
  limit: number;
  cursor?: string | undefined;
  workflowIds?: Array<string> | undefined;
  subscriberIds?: Array<string> | undefined;
  transactionIds?: Array<string> | undefined;
  statuses?: Array<string> | undefined;
  channels?: Array<string> | undefined;
  topicKey?: string | undefined;
  createdGte?: string | undefined;
  createdLte?: string | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const ActivityControllerGetWorkflowRunsRequest$outboundSchema: z.ZodType<
  ActivityControllerGetWorkflowRunsRequest$Outbound,
  z.ZodTypeDef,
  ActivityControllerGetWorkflowRunsRequest
> = z.object({
  limit: z.number().default(10),
  cursor: z.string().optional(),
  workflowIds: z.array(z.string()).optional(),
  subscriberIds: z.array(z.string()).optional(),
  transactionIds: z.array(z.string()).optional(),
  statuses: z.array(QueryParamStatuses$outboundSchema).optional(),
  channels: z.array(z.string()).optional(),
  topicKey: z.string().optional(),
  createdGte: z.string().optional(),
  createdLte: z.string().optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityControllerGetWorkflowRunsRequest$ {
  /** @deprecated use `ActivityControllerGetWorkflowRunsRequest$inboundSchema` instead. */
  export const inboundSchema =
    ActivityControllerGetWorkflowRunsRequest$inboundSchema;
  /** @deprecated use `ActivityControllerGetWorkflowRunsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ActivityControllerGetWorkflowRunsRequest$outboundSchema;
  /** @deprecated use `ActivityControllerGetWorkflowRunsRequest$Outbound` instead. */
  export type Outbound = ActivityControllerGetWorkflowRunsRequest$Outbound;
}

export function activityControllerGetWorkflowRunsRequestToJSON(
  activityControllerGetWorkflowRunsRequest:
    ActivityControllerGetWorkflowRunsRequest,
): string {
  return JSON.stringify(
    ActivityControllerGetWorkflowRunsRequest$outboundSchema.parse(
      activityControllerGetWorkflowRunsRequest,
    ),
  );
}

export function activityControllerGetWorkflowRunsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  ActivityControllerGetWorkflowRunsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ActivityControllerGetWorkflowRunsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ActivityControllerGetWorkflowRunsRequest' from JSON`,
  );
}
