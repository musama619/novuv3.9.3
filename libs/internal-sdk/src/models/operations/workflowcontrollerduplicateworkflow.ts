/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WorkflowControllerDuplicateWorkflowRequest = {
  workflowId: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  duplicateWorkflowDto: components.DuplicateWorkflowDto;
};

export type WorkflowControllerDuplicateWorkflowResponse = {
  headers: { [k: string]: Array<string> };
  result: components.WorkflowResponseDto;
};

/** @internal */
export const WorkflowControllerDuplicateWorkflowRequest$inboundSchema:
  z.ZodType<WorkflowControllerDuplicateWorkflowRequest, z.ZodTypeDef, unknown> =
    z.object({
      workflowId: z.string(),
      "idempotency-key": z.string().optional(),
      DuplicateWorkflowDto: components.DuplicateWorkflowDto$inboundSchema,
    }).transform((v) => {
      return remap$(v, {
        "idempotency-key": "idempotencyKey",
        "DuplicateWorkflowDto": "duplicateWorkflowDto",
      });
    });

/** @internal */
export type WorkflowControllerDuplicateWorkflowRequest$Outbound = {
  workflowId: string;
  "idempotency-key"?: string | undefined;
  DuplicateWorkflowDto: components.DuplicateWorkflowDto$Outbound;
};

/** @internal */
export const WorkflowControllerDuplicateWorkflowRequest$outboundSchema:
  z.ZodType<
    WorkflowControllerDuplicateWorkflowRequest$Outbound,
    z.ZodTypeDef,
    WorkflowControllerDuplicateWorkflowRequest
  > = z.object({
    workflowId: z.string(),
    idempotencyKey: z.string().optional(),
    duplicateWorkflowDto: components.DuplicateWorkflowDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
      duplicateWorkflowDto: "DuplicateWorkflowDto",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowControllerDuplicateWorkflowRequest$ {
  /** @deprecated use `WorkflowControllerDuplicateWorkflowRequest$inboundSchema` instead. */
  export const inboundSchema =
    WorkflowControllerDuplicateWorkflowRequest$inboundSchema;
  /** @deprecated use `WorkflowControllerDuplicateWorkflowRequest$outboundSchema` instead. */
  export const outboundSchema =
    WorkflowControllerDuplicateWorkflowRequest$outboundSchema;
  /** @deprecated use `WorkflowControllerDuplicateWorkflowRequest$Outbound` instead. */
  export type Outbound = WorkflowControllerDuplicateWorkflowRequest$Outbound;
}

export function workflowControllerDuplicateWorkflowRequestToJSON(
  workflowControllerDuplicateWorkflowRequest:
    WorkflowControllerDuplicateWorkflowRequest,
): string {
  return JSON.stringify(
    WorkflowControllerDuplicateWorkflowRequest$outboundSchema.parse(
      workflowControllerDuplicateWorkflowRequest,
    ),
  );
}

export function workflowControllerDuplicateWorkflowRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  WorkflowControllerDuplicateWorkflowRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WorkflowControllerDuplicateWorkflowRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'WorkflowControllerDuplicateWorkflowRequest' from JSON`,
  );
}

/** @internal */
export const WorkflowControllerDuplicateWorkflowResponse$inboundSchema:
  z.ZodType<
    WorkflowControllerDuplicateWorkflowResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.WorkflowResponseDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type WorkflowControllerDuplicateWorkflowResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.WorkflowResponseDto$Outbound;
};

/** @internal */
export const WorkflowControllerDuplicateWorkflowResponse$outboundSchema:
  z.ZodType<
    WorkflowControllerDuplicateWorkflowResponse$Outbound,
    z.ZodTypeDef,
    WorkflowControllerDuplicateWorkflowResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: components.WorkflowResponseDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowControllerDuplicateWorkflowResponse$ {
  /** @deprecated use `WorkflowControllerDuplicateWorkflowResponse$inboundSchema` instead. */
  export const inboundSchema =
    WorkflowControllerDuplicateWorkflowResponse$inboundSchema;
  /** @deprecated use `WorkflowControllerDuplicateWorkflowResponse$outboundSchema` instead. */
  export const outboundSchema =
    WorkflowControllerDuplicateWorkflowResponse$outboundSchema;
  /** @deprecated use `WorkflowControllerDuplicateWorkflowResponse$Outbound` instead. */
  export type Outbound = WorkflowControllerDuplicateWorkflowResponse$Outbound;
}

export function workflowControllerDuplicateWorkflowResponseToJSON(
  workflowControllerDuplicateWorkflowResponse:
    WorkflowControllerDuplicateWorkflowResponse,
): string {
  return JSON.stringify(
    WorkflowControllerDuplicateWorkflowResponse$outboundSchema.parse(
      workflowControllerDuplicateWorkflowResponse,
    ),
  );
}

export function workflowControllerDuplicateWorkflowResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  WorkflowControllerDuplicateWorkflowResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WorkflowControllerDuplicateWorkflowResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'WorkflowControllerDuplicateWorkflowResponse' from JSON`,
  );
}
