/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ReportType = {
  DeliveryTrend: "delivery-trend",
  InteractionTrend: "interaction-trend",
  WorkflowByVolume: "workflow-by-volume",
  ProviderByVolume: "provider-by-volume",
  MessagesDelivered: "messages-delivered",
  ActiveSubscribers: "active-subscribers",
  AvgMessagesPerSubscriber: "avg-messages-per-subscriber",
  WorkflowRunsMetric: "workflow-runs-metric",
  TotalInteractions: "total-interactions",
  WorkflowRunsTrend: "workflow-runs-trend",
  ActiveSubscribersTrend: "active-subscribers-trend",
  WorkflowRunsCount: "workflow-runs-count",
} as const;
export type ReportType = ClosedEnum<typeof ReportType>;

export const Statuses = {
  Success: "success",
  Error: "error",
  Pending: "pending",
  Skipped: "skipped",
  Canceled: "canceled",
  Merged: "merged",
} as const;
export type Statuses = ClosedEnum<typeof Statuses>;

export type ActivityControllerGetChartsRequest = {
  createdAtGte?: string | undefined;
  createdAtLte?: string | undefined;
  reportType: Array<ReportType>;
  workflowIds?: Array<string> | undefined;
  subscriberIds?: Array<string> | undefined;
  transactionIds?: Array<string> | undefined;
  statuses?: Array<Statuses> | undefined;
  channels?: Array<string> | undefined;
  topicKey?: string | undefined;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

/** @internal */
export const ReportType$inboundSchema: z.ZodNativeEnum<typeof ReportType> = z
  .nativeEnum(ReportType);

/** @internal */
export const ReportType$outboundSchema: z.ZodNativeEnum<typeof ReportType> =
  ReportType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportType$ {
  /** @deprecated use `ReportType$inboundSchema` instead. */
  export const inboundSchema = ReportType$inboundSchema;
  /** @deprecated use `ReportType$outboundSchema` instead. */
  export const outboundSchema = ReportType$outboundSchema;
}

/** @internal */
export const Statuses$inboundSchema: z.ZodNativeEnum<typeof Statuses> = z
  .nativeEnum(Statuses);

/** @internal */
export const Statuses$outboundSchema: z.ZodNativeEnum<typeof Statuses> =
  Statuses$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Statuses$ {
  /** @deprecated use `Statuses$inboundSchema` instead. */
  export const inboundSchema = Statuses$inboundSchema;
  /** @deprecated use `Statuses$outboundSchema` instead. */
  export const outboundSchema = Statuses$outboundSchema;
}

/** @internal */
export const ActivityControllerGetChartsRequest$inboundSchema: z.ZodType<
  ActivityControllerGetChartsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAtGte: z.string().optional(),
  createdAtLte: z.string().optional(),
  reportType: z.array(ReportType$inboundSchema),
  workflowIds: z.array(z.string()).optional(),
  subscriberIds: z.array(z.string()).optional(),
  transactionIds: z.array(z.string()).optional(),
  statuses: z.array(Statuses$inboundSchema).optional(),
  channels: z.array(z.string()).optional(),
  topicKey: z.string().optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type ActivityControllerGetChartsRequest$Outbound = {
  createdAtGte?: string | undefined;
  createdAtLte?: string | undefined;
  reportType: Array<string>;
  workflowIds?: Array<string> | undefined;
  subscriberIds?: Array<string> | undefined;
  transactionIds?: Array<string> | undefined;
  statuses?: Array<string> | undefined;
  channels?: Array<string> | undefined;
  topicKey?: string | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const ActivityControllerGetChartsRequest$outboundSchema: z.ZodType<
  ActivityControllerGetChartsRequest$Outbound,
  z.ZodTypeDef,
  ActivityControllerGetChartsRequest
> = z.object({
  createdAtGte: z.string().optional(),
  createdAtLte: z.string().optional(),
  reportType: z.array(ReportType$outboundSchema),
  workflowIds: z.array(z.string()).optional(),
  subscriberIds: z.array(z.string()).optional(),
  transactionIds: z.array(z.string()).optional(),
  statuses: z.array(Statuses$outboundSchema).optional(),
  channels: z.array(z.string()).optional(),
  topicKey: z.string().optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityControllerGetChartsRequest$ {
  /** @deprecated use `ActivityControllerGetChartsRequest$inboundSchema` instead. */
  export const inboundSchema = ActivityControllerGetChartsRequest$inboundSchema;
  /** @deprecated use `ActivityControllerGetChartsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ActivityControllerGetChartsRequest$outboundSchema;
  /** @deprecated use `ActivityControllerGetChartsRequest$Outbound` instead. */
  export type Outbound = ActivityControllerGetChartsRequest$Outbound;
}

export function activityControllerGetChartsRequestToJSON(
  activityControllerGetChartsRequest: ActivityControllerGetChartsRequest,
): string {
  return JSON.stringify(
    ActivityControllerGetChartsRequest$outboundSchema.parse(
      activityControllerGetChartsRequest,
    ),
  );
}

export function activityControllerGetChartsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ActivityControllerGetChartsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ActivityControllerGetChartsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityControllerGetChartsRequest' from JSON`,
  );
}
