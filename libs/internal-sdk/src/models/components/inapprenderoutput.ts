/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ActionDto,
  ActionDto$inboundSchema,
  ActionDto$Outbound,
  ActionDto$outboundSchema,
} from "./actiondto.js";
import {
  RedirectDto,
  RedirectDto$inboundSchema,
  RedirectDto$Outbound,
  RedirectDto$outboundSchema,
} from "./redirectdto.js";

export type InAppRenderOutput = {
  /**
   * Subject of the in-app notification
   */
  subject?: string | undefined;
  /**
   * Body of the in-app notification
   */
  body: string;
  /**
   * Avatar for the in-app notification
   */
  avatar?: string | undefined;
  /**
   * Primary action details
   */
  primaryAction?: ActionDto | undefined;
  /**
   * Secondary action details
   */
  secondaryAction?: ActionDto | undefined;
  /**
   * Additional data
   */
  data?: { [k: string]: any } | undefined;
  /**
   * Redirect details
   */
  redirect?: RedirectDto | undefined;
};

/** @internal */
export const InAppRenderOutput$inboundSchema: z.ZodType<
  InAppRenderOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  subject: z.string().optional(),
  body: z.string(),
  avatar: z.string().optional(),
  primaryAction: ActionDto$inboundSchema.optional(),
  secondaryAction: ActionDto$inboundSchema.optional(),
  data: z.record(z.any()).optional(),
  redirect: RedirectDto$inboundSchema.optional(),
});

/** @internal */
export type InAppRenderOutput$Outbound = {
  subject?: string | undefined;
  body: string;
  avatar?: string | undefined;
  primaryAction?: ActionDto$Outbound | undefined;
  secondaryAction?: ActionDto$Outbound | undefined;
  data?: { [k: string]: any } | undefined;
  redirect?: RedirectDto$Outbound | undefined;
};

/** @internal */
export const InAppRenderOutput$outboundSchema: z.ZodType<
  InAppRenderOutput$Outbound,
  z.ZodTypeDef,
  InAppRenderOutput
> = z.object({
  subject: z.string().optional(),
  body: z.string(),
  avatar: z.string().optional(),
  primaryAction: ActionDto$outboundSchema.optional(),
  secondaryAction: ActionDto$outboundSchema.optional(),
  data: z.record(z.any()).optional(),
  redirect: RedirectDto$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InAppRenderOutput$ {
  /** @deprecated use `InAppRenderOutput$inboundSchema` instead. */
  export const inboundSchema = InAppRenderOutput$inboundSchema;
  /** @deprecated use `InAppRenderOutput$outboundSchema` instead. */
  export const outboundSchema = InAppRenderOutput$outboundSchema;
  /** @deprecated use `InAppRenderOutput$Outbound` instead. */
  export type Outbound = InAppRenderOutput$Outbound;
}

export function inAppRenderOutputToJSON(
  inAppRenderOutput: InAppRenderOutput,
): string {
  return JSON.stringify(
    InAppRenderOutput$outboundSchema.parse(inAppRenderOutput),
  );
}

export function inAppRenderOutputFromJSON(
  jsonString: string,
): SafeParseResult<InAppRenderOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InAppRenderOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InAppRenderOutput' from JSON`,
  );
}
