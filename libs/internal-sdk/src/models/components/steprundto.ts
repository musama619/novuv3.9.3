/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DigestMetadataDto,
  DigestMetadataDto$inboundSchema,
  DigestMetadataDto$Outbound,
  DigestMetadataDto$outboundSchema,
} from "./digestmetadatadto.js";

/**
 * Step status
 */
export const StepRunDtoStatus = {
  Pending: "pending",
  Queued: "queued",
  Running: "running",
  Completed: "completed",
  Failed: "failed",
  Delayed: "delayed",
  Canceled: "canceled",
  Merged: "merged",
  Skipped: "skipped",
} as const;
/**
 * Step status
 */
export type StepRunDtoStatus = ClosedEnum<typeof StepRunDtoStatus>;

export type ExecutionDetails = {};

export type StepRunDto = {
  /**
   * Step run identifier
   */
  stepRunId: string;
  /**
   * Step identifier
   */
  stepId: string;
  /**
   * Step type
   */
  stepType: string;
  /**
   * Provider identifier
   */
  providerId?: string | undefined;
  /**
   * Step status
   */
  status: StepRunDtoStatus;
  /**
   * Creation timestamp
   */
  createdAt: Date;
  /**
   * Update timestamp
   */
  updatedAt: Date;
  /**
   * Execution details
   */
  executionDetails: Array<ExecutionDetails>;
  /**
   * Optional digest for the job, including metadata and events
   */
  digest?: DigestMetadataDto | undefined;
};

/** @internal */
export const StepRunDtoStatus$inboundSchema: z.ZodNativeEnum<
  typeof StepRunDtoStatus
> = z.nativeEnum(StepRunDtoStatus);

/** @internal */
export const StepRunDtoStatus$outboundSchema: z.ZodNativeEnum<
  typeof StepRunDtoStatus
> = StepRunDtoStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StepRunDtoStatus$ {
  /** @deprecated use `StepRunDtoStatus$inboundSchema` instead. */
  export const inboundSchema = StepRunDtoStatus$inboundSchema;
  /** @deprecated use `StepRunDtoStatus$outboundSchema` instead. */
  export const outboundSchema = StepRunDtoStatus$outboundSchema;
}

/** @internal */
export const ExecutionDetails$inboundSchema: z.ZodType<
  ExecutionDetails,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ExecutionDetails$Outbound = {};

/** @internal */
export const ExecutionDetails$outboundSchema: z.ZodType<
  ExecutionDetails$Outbound,
  z.ZodTypeDef,
  ExecutionDetails
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExecutionDetails$ {
  /** @deprecated use `ExecutionDetails$inboundSchema` instead. */
  export const inboundSchema = ExecutionDetails$inboundSchema;
  /** @deprecated use `ExecutionDetails$outboundSchema` instead. */
  export const outboundSchema = ExecutionDetails$outboundSchema;
  /** @deprecated use `ExecutionDetails$Outbound` instead. */
  export type Outbound = ExecutionDetails$Outbound;
}

export function executionDetailsToJSON(
  executionDetails: ExecutionDetails,
): string {
  return JSON.stringify(
    ExecutionDetails$outboundSchema.parse(executionDetails),
  );
}

export function executionDetailsFromJSON(
  jsonString: string,
): SafeParseResult<ExecutionDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExecutionDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExecutionDetails' from JSON`,
  );
}

/** @internal */
export const StepRunDto$inboundSchema: z.ZodType<
  StepRunDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  stepRunId: z.string(),
  stepId: z.string(),
  stepType: z.string(),
  providerId: z.string().optional(),
  status: StepRunDtoStatus$inboundSchema,
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  executionDetails: z.array(z.lazy(() => ExecutionDetails$inboundSchema)),
  digest: DigestMetadataDto$inboundSchema.optional(),
});

/** @internal */
export type StepRunDto$Outbound = {
  stepRunId: string;
  stepId: string;
  stepType: string;
  providerId?: string | undefined;
  status: string;
  createdAt: string;
  updatedAt: string;
  executionDetails: Array<ExecutionDetails$Outbound>;
  digest?: DigestMetadataDto$Outbound | undefined;
};

/** @internal */
export const StepRunDto$outboundSchema: z.ZodType<
  StepRunDto$Outbound,
  z.ZodTypeDef,
  StepRunDto
> = z.object({
  stepRunId: z.string(),
  stepId: z.string(),
  stepType: z.string(),
  providerId: z.string().optional(),
  status: StepRunDtoStatus$outboundSchema,
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  executionDetails: z.array(z.lazy(() => ExecutionDetails$outboundSchema)),
  digest: DigestMetadataDto$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StepRunDto$ {
  /** @deprecated use `StepRunDto$inboundSchema` instead. */
  export const inboundSchema = StepRunDto$inboundSchema;
  /** @deprecated use `StepRunDto$outboundSchema` instead. */
  export const outboundSchema = StepRunDto$outboundSchema;
  /** @deprecated use `StepRunDto$Outbound` instead. */
  export type Outbound = StepRunDto$Outbound;
}

export function stepRunDtoToJSON(stepRunDto: StepRunDto): string {
  return JSON.stringify(StepRunDto$outboundSchema.parse(stepRunDto));
}

export function stepRunDtoFromJSON(
  jsonString: string,
): SafeParseResult<StepRunDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StepRunDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StepRunDto' from JSON`,
  );
}
