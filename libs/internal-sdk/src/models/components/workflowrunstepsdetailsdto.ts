/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Step status
 */
export const WorkflowRunStepsDetailsDtoStatus = {
  Pending: "pending",
  Queued: "queued",
  Running: "running",
  Completed: "completed",
  Failed: "failed",
  Delayed: "delayed",
  Canceled: "canceled",
  Merged: "merged",
  Skipped: "skipped",
} as const;
/**
 * Step status
 */
export type WorkflowRunStepsDetailsDtoStatus = ClosedEnum<
  typeof WorkflowRunStepsDetailsDtoStatus
>;

export type WorkflowRunStepsDetailsDto = {
  /**
   * Step run identifier
   */
  id: string;
  /**
   * Step identifier
   */
  stepRunId: string;
  /**
   * Step type
   */
  stepType: string;
  /**
   * Step status
   */
  status: WorkflowRunStepsDetailsDtoStatus;
};

/** @internal */
export const WorkflowRunStepsDetailsDtoStatus$inboundSchema: z.ZodNativeEnum<
  typeof WorkflowRunStepsDetailsDtoStatus
> = z.nativeEnum(WorkflowRunStepsDetailsDtoStatus);

/** @internal */
export const WorkflowRunStepsDetailsDtoStatus$outboundSchema: z.ZodNativeEnum<
  typeof WorkflowRunStepsDetailsDtoStatus
> = WorkflowRunStepsDetailsDtoStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowRunStepsDetailsDtoStatus$ {
  /** @deprecated use `WorkflowRunStepsDetailsDtoStatus$inboundSchema` instead. */
  export const inboundSchema = WorkflowRunStepsDetailsDtoStatus$inboundSchema;
  /** @deprecated use `WorkflowRunStepsDetailsDtoStatus$outboundSchema` instead. */
  export const outboundSchema = WorkflowRunStepsDetailsDtoStatus$outboundSchema;
}

/** @internal */
export const WorkflowRunStepsDetailsDto$inboundSchema: z.ZodType<
  WorkflowRunStepsDetailsDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  stepRunId: z.string(),
  stepType: z.string(),
  status: WorkflowRunStepsDetailsDtoStatus$inboundSchema,
});

/** @internal */
export type WorkflowRunStepsDetailsDto$Outbound = {
  id: string;
  stepRunId: string;
  stepType: string;
  status: string;
};

/** @internal */
export const WorkflowRunStepsDetailsDto$outboundSchema: z.ZodType<
  WorkflowRunStepsDetailsDto$Outbound,
  z.ZodTypeDef,
  WorkflowRunStepsDetailsDto
> = z.object({
  id: z.string(),
  stepRunId: z.string(),
  stepType: z.string(),
  status: WorkflowRunStepsDetailsDtoStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowRunStepsDetailsDto$ {
  /** @deprecated use `WorkflowRunStepsDetailsDto$inboundSchema` instead. */
  export const inboundSchema = WorkflowRunStepsDetailsDto$inboundSchema;
  /** @deprecated use `WorkflowRunStepsDetailsDto$outboundSchema` instead. */
  export const outboundSchema = WorkflowRunStepsDetailsDto$outboundSchema;
  /** @deprecated use `WorkflowRunStepsDetailsDto$Outbound` instead. */
  export type Outbound = WorkflowRunStepsDetailsDto$Outbound;
}

export function workflowRunStepsDetailsDtoToJSON(
  workflowRunStepsDetailsDto: WorkflowRunStepsDetailsDto,
): string {
  return JSON.stringify(
    WorkflowRunStepsDetailsDto$outboundSchema.parse(workflowRunStepsDetailsDto),
  );
}

export function workflowRunStepsDetailsDtoFromJSON(
  jsonString: string,
): SafeParseResult<WorkflowRunStepsDetailsDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkflowRunStepsDetailsDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkflowRunStepsDetailsDto' from JSON`,
  );
}
