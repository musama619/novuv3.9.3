/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RequestLogResponseDto,
  RequestLogResponseDto$inboundSchema,
  RequestLogResponseDto$Outbound,
  RequestLogResponseDto$outboundSchema,
} from "./requestlogresponsedto.js";
import {
  TraceResponseDto,
  TraceResponseDto$inboundSchema,
  TraceResponseDto$Outbound,
  TraceResponseDto$outboundSchema,
} from "./traceresponsedto.js";

export type GetRequestResponseDto = {
  /**
   * Request details
   */
  request: RequestLogResponseDto;
  /**
   * Associated traces
   */
  traces: Array<TraceResponseDto>;
};

/** @internal */
export const GetRequestResponseDto$inboundSchema: z.ZodType<
  GetRequestResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  request: RequestLogResponseDto$inboundSchema,
  traces: z.array(TraceResponseDto$inboundSchema),
});

/** @internal */
export type GetRequestResponseDto$Outbound = {
  request: RequestLogResponseDto$Outbound;
  traces: Array<TraceResponseDto$Outbound>;
};

/** @internal */
export const GetRequestResponseDto$outboundSchema: z.ZodType<
  GetRequestResponseDto$Outbound,
  z.ZodTypeDef,
  GetRequestResponseDto
> = z.object({
  request: RequestLogResponseDto$outboundSchema,
  traces: z.array(TraceResponseDto$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRequestResponseDto$ {
  /** @deprecated use `GetRequestResponseDto$inboundSchema` instead. */
  export const inboundSchema = GetRequestResponseDto$inboundSchema;
  /** @deprecated use `GetRequestResponseDto$outboundSchema` instead. */
  export const outboundSchema = GetRequestResponseDto$outboundSchema;
  /** @deprecated use `GetRequestResponseDto$Outbound` instead. */
  export type Outbound = GetRequestResponseDto$Outbound;
}

export function getRequestResponseDtoToJSON(
  getRequestResponseDto: GetRequestResponseDto,
): string {
  return JSON.stringify(
    GetRequestResponseDto$outboundSchema.parse(getRequestResponseDto),
  );
}

export function getRequestResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<GetRequestResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRequestResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRequestResponseDto' from JSON`,
  );
}
