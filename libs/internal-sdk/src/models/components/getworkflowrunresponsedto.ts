/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StepRunDto,
  StepRunDto$inboundSchema,
  StepRunDto$Outbound,
  StepRunDto$outboundSchema,
} from "./steprundto.js";

/**
 * Workflow run status
 */
export const GetWorkflowRunResponseDtoStatus = {
  Success: "success",
  Error: "error",
  Pending: "pending",
  Skipped: "skipped",
  Canceled: "canceled",
  Merged: "merged",
} as const;
/**
 * Workflow run status
 */
export type GetWorkflowRunResponseDtoStatus = ClosedEnum<
  typeof GetWorkflowRunResponseDtoStatus
>;

/**
 * Trigger payload
 */
export type Payload = {};

export type GetWorkflowRunResponseDto = {
  /**
   * Workflow run id
   */
  id: string;
  /**
   * Workflow identifier
   */
  workflowId: string;
  /**
   * Workflow name
   */
  workflowName: string;
  /**
   * Organization identifier
   */
  organizationId: string;
  /**
   * Environment identifier
   */
  environmentId: string;
  /**
   * Internal subscriber identifier
   */
  internalSubscriberId: string;
  /**
   * External subscriber identifier
   */
  subscriberId?: string | undefined;
  /**
   * Workflow run status
   */
  status: GetWorkflowRunResponseDtoStatus;
  /**
   * Trigger identifier
   */
  triggerIdentifier: string;
  /**
   * Transaction identifier
   */
  transactionId: string;
  /**
   * Creation timestamp
   */
  createdAt: string;
  /**
   * Update timestamp
   */
  updatedAt: string;
  /**
   * Step runs
   */
  steps: Array<StepRunDto>;
  /**
   * Trigger payload
   */
  payload: Payload;
};

/** @internal */
export const GetWorkflowRunResponseDtoStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetWorkflowRunResponseDtoStatus
> = z.nativeEnum(GetWorkflowRunResponseDtoStatus);

/** @internal */
export const GetWorkflowRunResponseDtoStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetWorkflowRunResponseDtoStatus
> = GetWorkflowRunResponseDtoStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkflowRunResponseDtoStatus$ {
  /** @deprecated use `GetWorkflowRunResponseDtoStatus$inboundSchema` instead. */
  export const inboundSchema = GetWorkflowRunResponseDtoStatus$inboundSchema;
  /** @deprecated use `GetWorkflowRunResponseDtoStatus$outboundSchema` instead. */
  export const outboundSchema = GetWorkflowRunResponseDtoStatus$outboundSchema;
}

/** @internal */
export const Payload$inboundSchema: z.ZodType<Payload, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type Payload$Outbound = {};

/** @internal */
export const Payload$outboundSchema: z.ZodType<
  Payload$Outbound,
  z.ZodTypeDef,
  Payload
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Payload$ {
  /** @deprecated use `Payload$inboundSchema` instead. */
  export const inboundSchema = Payload$inboundSchema;
  /** @deprecated use `Payload$outboundSchema` instead. */
  export const outboundSchema = Payload$outboundSchema;
  /** @deprecated use `Payload$Outbound` instead. */
  export type Outbound = Payload$Outbound;
}

export function payloadToJSON(payload: Payload): string {
  return JSON.stringify(Payload$outboundSchema.parse(payload));
}

export function payloadFromJSON(
  jsonString: string,
): SafeParseResult<Payload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Payload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Payload' from JSON`,
  );
}

/** @internal */
export const GetWorkflowRunResponseDto$inboundSchema: z.ZodType<
  GetWorkflowRunResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  workflowId: z.string(),
  workflowName: z.string(),
  organizationId: z.string(),
  environmentId: z.string(),
  internalSubscriberId: z.string(),
  subscriberId: z.string().optional(),
  status: GetWorkflowRunResponseDtoStatus$inboundSchema,
  triggerIdentifier: z.string(),
  transactionId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  steps: z.array(StepRunDto$inboundSchema),
  payload: z.lazy(() => Payload$inboundSchema),
});

/** @internal */
export type GetWorkflowRunResponseDto$Outbound = {
  id: string;
  workflowId: string;
  workflowName: string;
  organizationId: string;
  environmentId: string;
  internalSubscriberId: string;
  subscriberId?: string | undefined;
  status: string;
  triggerIdentifier: string;
  transactionId: string;
  createdAt: string;
  updatedAt: string;
  steps: Array<StepRunDto$Outbound>;
  payload: Payload$Outbound;
};

/** @internal */
export const GetWorkflowRunResponseDto$outboundSchema: z.ZodType<
  GetWorkflowRunResponseDto$Outbound,
  z.ZodTypeDef,
  GetWorkflowRunResponseDto
> = z.object({
  id: z.string(),
  workflowId: z.string(),
  workflowName: z.string(),
  organizationId: z.string(),
  environmentId: z.string(),
  internalSubscriberId: z.string(),
  subscriberId: z.string().optional(),
  status: GetWorkflowRunResponseDtoStatus$outboundSchema,
  triggerIdentifier: z.string(),
  transactionId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  steps: z.array(StepRunDto$outboundSchema),
  payload: z.lazy(() => Payload$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkflowRunResponseDto$ {
  /** @deprecated use `GetWorkflowRunResponseDto$inboundSchema` instead. */
  export const inboundSchema = GetWorkflowRunResponseDto$inboundSchema;
  /** @deprecated use `GetWorkflowRunResponseDto$outboundSchema` instead. */
  export const outboundSchema = GetWorkflowRunResponseDto$outboundSchema;
  /** @deprecated use `GetWorkflowRunResponseDto$Outbound` instead. */
  export type Outbound = GetWorkflowRunResponseDto$Outbound;
}

export function getWorkflowRunResponseDtoToJSON(
  getWorkflowRunResponseDto: GetWorkflowRunResponseDto,
): string {
  return JSON.stringify(
    GetWorkflowRunResponseDto$outboundSchema.parse(getWorkflowRunResponseDto),
  );
}

export function getWorkflowRunResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<GetWorkflowRunResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWorkflowRunResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWorkflowRunResponseDto' from JSON`,
  );
}
