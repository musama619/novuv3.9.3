/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GetWorkflowRunsDto,
  GetWorkflowRunsDto$inboundSchema,
  GetWorkflowRunsDto$Outbound,
  GetWorkflowRunsDto$outboundSchema,
} from "./getworkflowrunsdto.js";

/**
 * Next cursor for pagination
 */
export type Next = {};

/**
 * Previous cursor for pagination
 */
export type Previous = {};

export type GetWorkflowRunsResponseDto = {
  /**
   * Workflow runs data
   */
  data: Array<GetWorkflowRunsDto>;
  /**
   * Next cursor for pagination
   */
  next?: Next | null | undefined;
  /**
   * Previous cursor for pagination
   */
  previous?: Previous | null | undefined;
};

/** @internal */
export const Next$inboundSchema: z.ZodType<Next, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Next$Outbound = {};

/** @internal */
export const Next$outboundSchema: z.ZodType<Next$Outbound, z.ZodTypeDef, Next> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Next$ {
  /** @deprecated use `Next$inboundSchema` instead. */
  export const inboundSchema = Next$inboundSchema;
  /** @deprecated use `Next$outboundSchema` instead. */
  export const outboundSchema = Next$outboundSchema;
  /** @deprecated use `Next$Outbound` instead. */
  export type Outbound = Next$Outbound;
}

export function nextToJSON(next: Next): string {
  return JSON.stringify(Next$outboundSchema.parse(next));
}

export function nextFromJSON(
  jsonString: string,
): SafeParseResult<Next, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Next$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Next' from JSON`,
  );
}

/** @internal */
export const Previous$inboundSchema: z.ZodType<
  Previous,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Previous$Outbound = {};

/** @internal */
export const Previous$outboundSchema: z.ZodType<
  Previous$Outbound,
  z.ZodTypeDef,
  Previous
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Previous$ {
  /** @deprecated use `Previous$inboundSchema` instead. */
  export const inboundSchema = Previous$inboundSchema;
  /** @deprecated use `Previous$outboundSchema` instead. */
  export const outboundSchema = Previous$outboundSchema;
  /** @deprecated use `Previous$Outbound` instead. */
  export type Outbound = Previous$Outbound;
}

export function previousToJSON(previous: Previous): string {
  return JSON.stringify(Previous$outboundSchema.parse(previous));
}

export function previousFromJSON(
  jsonString: string,
): SafeParseResult<Previous, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Previous$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Previous' from JSON`,
  );
}

/** @internal */
export const GetWorkflowRunsResponseDto$inboundSchema: z.ZodType<
  GetWorkflowRunsResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(GetWorkflowRunsDto$inboundSchema),
  next: z.nullable(z.lazy(() => Next$inboundSchema)).optional(),
  previous: z.nullable(z.lazy(() => Previous$inboundSchema)).optional(),
});

/** @internal */
export type GetWorkflowRunsResponseDto$Outbound = {
  data: Array<GetWorkflowRunsDto$Outbound>;
  next?: Next$Outbound | null | undefined;
  previous?: Previous$Outbound | null | undefined;
};

/** @internal */
export const GetWorkflowRunsResponseDto$outboundSchema: z.ZodType<
  GetWorkflowRunsResponseDto$Outbound,
  z.ZodTypeDef,
  GetWorkflowRunsResponseDto
> = z.object({
  data: z.array(GetWorkflowRunsDto$outboundSchema),
  next: z.nullable(z.lazy(() => Next$outboundSchema)).optional(),
  previous: z.nullable(z.lazy(() => Previous$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkflowRunsResponseDto$ {
  /** @deprecated use `GetWorkflowRunsResponseDto$inboundSchema` instead. */
  export const inboundSchema = GetWorkflowRunsResponseDto$inboundSchema;
  /** @deprecated use `GetWorkflowRunsResponseDto$outboundSchema` instead. */
  export const outboundSchema = GetWorkflowRunsResponseDto$outboundSchema;
  /** @deprecated use `GetWorkflowRunsResponseDto$Outbound` instead. */
  export type Outbound = GetWorkflowRunsResponseDto$Outbound;
}

export function getWorkflowRunsResponseDtoToJSON(
  getWorkflowRunsResponseDto: GetWorkflowRunsResponseDto,
): string {
  return JSON.stringify(
    GetWorkflowRunsResponseDto$outboundSchema.parse(getWorkflowRunsResponseDto),
  );
}

export function getWorkflowRunsResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<GetWorkflowRunsResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWorkflowRunsResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWorkflowRunsResponseDto' from JSON`,
  );
}
