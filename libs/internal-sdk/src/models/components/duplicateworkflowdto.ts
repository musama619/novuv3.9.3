/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DuplicateWorkflowDto = {
  /**
   * Name of the workflow
   */
  name?: string | undefined;
  /**
   * Tags associated with the workflow
   */
  tags?: Array<string> | undefined;
  /**
   * Description of the workflow
   */
  description?: string | undefined;
  /**
   * Enable or disable translations for this workflow
   */
  isTranslationEnabled?: boolean | undefined;
};

/** @internal */
export const DuplicateWorkflowDto$inboundSchema: z.ZodType<
  DuplicateWorkflowDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  tags: z.array(z.string()).optional(),
  description: z.string().optional(),
  isTranslationEnabled: z.boolean().default(false),
});

/** @internal */
export type DuplicateWorkflowDto$Outbound = {
  name?: string | undefined;
  tags?: Array<string> | undefined;
  description?: string | undefined;
  isTranslationEnabled: boolean;
};

/** @internal */
export const DuplicateWorkflowDto$outboundSchema: z.ZodType<
  DuplicateWorkflowDto$Outbound,
  z.ZodTypeDef,
  DuplicateWorkflowDto
> = z.object({
  name: z.string().optional(),
  tags: z.array(z.string()).optional(),
  description: z.string().optional(),
  isTranslationEnabled: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DuplicateWorkflowDto$ {
  /** @deprecated use `DuplicateWorkflowDto$inboundSchema` instead. */
  export const inboundSchema = DuplicateWorkflowDto$inboundSchema;
  /** @deprecated use `DuplicateWorkflowDto$outboundSchema` instead. */
  export const outboundSchema = DuplicateWorkflowDto$outboundSchema;
  /** @deprecated use `DuplicateWorkflowDto$Outbound` instead. */
  export type Outbound = DuplicateWorkflowDto$Outbound;
}

export function duplicateWorkflowDtoToJSON(
  duplicateWorkflowDto: DuplicateWorkflowDto,
): string {
  return JSON.stringify(
    DuplicateWorkflowDto$outboundSchema.parse(duplicateWorkflowDto),
  );
}

export function duplicateWorkflowDtoFromJSON(
  jsonString: string,
): SafeParseResult<DuplicateWorkflowDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DuplicateWorkflowDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DuplicateWorkflowDto' from JSON`,
  );
}
