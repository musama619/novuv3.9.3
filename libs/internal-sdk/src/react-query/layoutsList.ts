/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { NovuCore } from "../core.js";
import { layoutsList } from "../funcs/layoutsList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useNovuContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type LayoutsListQueryData = operations.LayoutsControllerListResponse;

/**
 * List all layouts
 *
 * @remarks
 * Retrieves a list of layouts with optional filtering and pagination
 */
export function useLayoutsList(
  request: operations.LayoutsControllerListRequest,
  options?: QueryHookOptions<LayoutsListQueryData>,
): UseQueryResult<LayoutsListQueryData, Error> {
  const client = useNovuContext();
  return useQuery({
    ...buildLayoutsListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * List all layouts
 *
 * @remarks
 * Retrieves a list of layouts with optional filtering and pagination
 */
export function useLayoutsListSuspense(
  request: operations.LayoutsControllerListRequest,
  options?: SuspenseQueryHookOptions<LayoutsListQueryData>,
): UseSuspenseQueryResult<LayoutsListQueryData, Error> {
  const client = useNovuContext();
  return useSuspenseQuery({
    ...buildLayoutsListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchLayoutsList(
  queryClient: QueryClient,
  client$: NovuCore,
  request: operations.LayoutsControllerListRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildLayoutsListQuery(
      client$,
      request,
    ),
  });
}

export function setLayoutsListData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      limit?: number | undefined;
      offset?: number | undefined;
      orderDirection?: components.DirectionEnum | undefined;
      orderBy?: components.LayoutResponseDtoSortField | undefined;
      query?: string | undefined;
      idempotencyKey?: string | undefined;
    },
  ],
  data: LayoutsListQueryData,
): LayoutsListQueryData | undefined {
  const key = queryKeyLayoutsList(...queryKeyBase);

  return client.setQueryData<LayoutsListQueryData>(key, data);
}

export function invalidateLayoutsList(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      limit?: number | undefined;
      offset?: number | undefined;
      orderDirection?: components.DirectionEnum | undefined;
      orderBy?: components.LayoutResponseDtoSortField | undefined;
      query?: string | undefined;
      idempotencyKey?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Layouts", "list", ...queryKeyBase],
  });
}

export function invalidateAllLayoutsList(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Layouts", "list"],
  });
}

export function buildLayoutsListQuery(
  client$: NovuCore,
  request: operations.LayoutsControllerListRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<LayoutsListQueryData>;
} {
  return {
    queryKey: queryKeyLayoutsList({
      limit: request.limit,
      offset: request.offset,
      orderDirection: request.orderDirection,
      orderBy: request.orderBy,
      query: request.query,
      idempotencyKey: request.idempotencyKey,
    }),
    queryFn: async function layoutsListQueryFn(
      ctx,
    ): Promise<LayoutsListQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(layoutsList(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyLayoutsList(
  parameters: {
    limit?: number | undefined;
    offset?: number | undefined;
    orderDirection?: components.DirectionEnum | undefined;
    orderBy?: components.LayoutResponseDtoSortField | undefined;
    query?: string | undefined;
    idempotencyKey?: string | undefined;
  },
): QueryKey {
  return ["@novu/api", "Layouts", "list", parameters];
}
