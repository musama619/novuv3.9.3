/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { NovuCore } from "../core.js";
import { topicsSubscriptionsList } from "../funcs/topicsSubscriptionsList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useNovuContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type TopicsSubscriptionsListQueryData =
  operations.TopicsControllerListTopicSubscriptionsResponse;

/**
 * List topic subscriptions
 *
 * @remarks
 * List all subscriptions of subscribers for a topic.
 *     Checkout all available filters in the query section.
 */
export function useTopicsSubscriptionsList(
  request: operations.TopicsControllerListTopicSubscriptionsRequest,
  options?: QueryHookOptions<TopicsSubscriptionsListQueryData>,
): UseQueryResult<TopicsSubscriptionsListQueryData, Error> {
  const client = useNovuContext();
  return useQuery({
    ...buildTopicsSubscriptionsListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * List topic subscriptions
 *
 * @remarks
 * List all subscriptions of subscribers for a topic.
 *     Checkout all available filters in the query section.
 */
export function useTopicsSubscriptionsListSuspense(
  request: operations.TopicsControllerListTopicSubscriptionsRequest,
  options?: SuspenseQueryHookOptions<TopicsSubscriptionsListQueryData>,
): UseSuspenseQueryResult<TopicsSubscriptionsListQueryData, Error> {
  const client = useNovuContext();
  return useSuspenseQuery({
    ...buildTopicsSubscriptionsListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchTopicsSubscriptionsList(
  queryClient: QueryClient,
  client$: NovuCore,
  request: operations.TopicsControllerListTopicSubscriptionsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildTopicsSubscriptionsListQuery(
      client$,
      request,
    ),
  });
}

export function setTopicsSubscriptionsListData(
  client: QueryClient,
  queryKeyBase: [
    topicKey: string,
    parameters: {
      after?: string | undefined;
      before?: string | undefined;
      limit?: number | undefined;
      orderDirection?:
        | operations.TopicsControllerListTopicSubscriptionsQueryParamOrderDirection
        | undefined;
      orderBy?: string | undefined;
      includeCursor?: boolean | undefined;
      subscriberId?: string | undefined;
      idempotencyKey?: string | undefined;
    },
  ],
  data: TopicsSubscriptionsListQueryData,
): TopicsSubscriptionsListQueryData | undefined {
  const key = queryKeyTopicsSubscriptionsList(...queryKeyBase);

  return client.setQueryData<TopicsSubscriptionsListQueryData>(key, data);
}

export function invalidateTopicsSubscriptionsList(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      topicKey: string,
      parameters: {
        after?: string | undefined;
        before?: string | undefined;
        limit?: number | undefined;
        orderDirection?:
          | operations.TopicsControllerListTopicSubscriptionsQueryParamOrderDirection
          | undefined;
        orderBy?: string | undefined;
        includeCursor?: boolean | undefined;
        subscriberId?: string | undefined;
        idempotencyKey?: string | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Subscriptions", "list", ...queryKeyBase],
  });
}

export function invalidateAllTopicsSubscriptionsList(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Subscriptions", "list"],
  });
}

export function buildTopicsSubscriptionsListQuery(
  client$: NovuCore,
  request: operations.TopicsControllerListTopicSubscriptionsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<TopicsSubscriptionsListQueryData>;
} {
  return {
    queryKey: queryKeyTopicsSubscriptionsList(request.topicKey, {
      after: request.after,
      before: request.before,
      limit: request.limit,
      orderDirection: request.orderDirection,
      orderBy: request.orderBy,
      includeCursor: request.includeCursor,
      subscriberId: request.subscriberId,
      idempotencyKey: request.idempotencyKey,
    }),
    queryFn: async function topicsSubscriptionsListQueryFn(
      ctx,
    ): Promise<TopicsSubscriptionsListQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(topicsSubscriptionsList(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyTopicsSubscriptionsList(
  topicKey: string,
  parameters: {
    after?: string | undefined;
    before?: string | undefined;
    limit?: number | undefined;
    orderDirection?:
      | operations.TopicsControllerListTopicSubscriptionsQueryParamOrderDirection
      | undefined;
    orderBy?: string | undefined;
    includeCursor?: boolean | undefined;
    subscriberId?: string | undefined;
    idempotencyKey?: string | undefined;
  },
): QueryKey {
  return ["@novu/api", "Subscriptions", "list", topicKey, parameters];
}
