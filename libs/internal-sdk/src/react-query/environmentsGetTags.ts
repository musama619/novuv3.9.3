/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { NovuCore } from "../core.js";
import { environmentsGetTags } from "../funcs/environmentsGetTags.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useNovuContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type EnvironmentsGetTagsQueryData =
  operations.EnvironmentsControllerGetEnvironmentTagsResponse;

/**
 * Get environment tags
 *
 * @remarks
 * Retrieve all unique tags used in workflows within the specified environment. These tags can be used for filtering workflows.
 */
export function useEnvironmentsGetTags(
  environmentId: string,
  idempotencyKey?: string | undefined,
  options?: QueryHookOptions<EnvironmentsGetTagsQueryData>,
): UseQueryResult<EnvironmentsGetTagsQueryData, Error> {
  const client = useNovuContext();
  return useQuery({
    ...buildEnvironmentsGetTagsQuery(
      client,
      environmentId,
      idempotencyKey,
      options,
    ),
    ...options,
  });
}

/**
 * Get environment tags
 *
 * @remarks
 * Retrieve all unique tags used in workflows within the specified environment. These tags can be used for filtering workflows.
 */
export function useEnvironmentsGetTagsSuspense(
  environmentId: string,
  idempotencyKey?: string | undefined,
  options?: SuspenseQueryHookOptions<EnvironmentsGetTagsQueryData>,
): UseSuspenseQueryResult<EnvironmentsGetTagsQueryData, Error> {
  const client = useNovuContext();
  return useSuspenseQuery({
    ...buildEnvironmentsGetTagsQuery(
      client,
      environmentId,
      idempotencyKey,
      options,
    ),
    ...options,
  });
}

export function prefetchEnvironmentsGetTags(
  queryClient: QueryClient,
  client$: NovuCore,
  environmentId: string,
  idempotencyKey?: string | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildEnvironmentsGetTagsQuery(
      client$,
      environmentId,
      idempotencyKey,
    ),
  });
}

export function setEnvironmentsGetTagsData(
  client: QueryClient,
  queryKeyBase: [
    environmentId: string,
    parameters: { idempotencyKey?: string | undefined },
  ],
  data: EnvironmentsGetTagsQueryData,
): EnvironmentsGetTagsQueryData | undefined {
  const key = queryKeyEnvironmentsGetTags(...queryKeyBase);

  return client.setQueryData<EnvironmentsGetTagsQueryData>(key, data);
}

export function invalidateEnvironmentsGetTags(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [environmentId: string, parameters: { idempotencyKey?: string | undefined }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Environments", "getTags", ...queryKeyBase],
  });
}

export function invalidateAllEnvironmentsGetTags(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Environments", "getTags"],
  });
}

export function buildEnvironmentsGetTagsQuery(
  client$: NovuCore,
  environmentId: string,
  idempotencyKey?: string | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<EnvironmentsGetTagsQueryData>;
} {
  return {
    queryKey: queryKeyEnvironmentsGetTags(environmentId, { idempotencyKey }),
    queryFn: async function environmentsGetTagsQueryFn(
      ctx,
    ): Promise<EnvironmentsGetTagsQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(environmentsGetTags(
        client$,
        environmentId,
        idempotencyKey,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyEnvironmentsGetTags(
  environmentId: string,
  parameters: { idempotencyKey?: string | undefined },
): QueryKey {
  return ["@novu/api", "Environments", "getTags", environmentId, parameters];
}
