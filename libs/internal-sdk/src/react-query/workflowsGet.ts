/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { NovuCore } from "../core.js";
import { workflowsGet } from "../funcs/workflowsGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useNovuContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type WorkflowsGetQueryData =
  operations.WorkflowControllerGetWorkflowResponse;

/**
 * Retrieve a workflow
 *
 * @remarks
 * Fetches details of a specific workflow by its unique identifier **workflowId**
 */
export function useWorkflowsGet(
  workflowId: string,
  environmentId?: string | undefined,
  idempotencyKey?: string | undefined,
  options?: QueryHookOptions<WorkflowsGetQueryData>,
): UseQueryResult<WorkflowsGetQueryData, Error> {
  const client = useNovuContext();
  return useQuery({
    ...buildWorkflowsGetQuery(
      client,
      workflowId,
      environmentId,
      idempotencyKey,
      options,
    ),
    ...options,
  });
}

/**
 * Retrieve a workflow
 *
 * @remarks
 * Fetches details of a specific workflow by its unique identifier **workflowId**
 */
export function useWorkflowsGetSuspense(
  workflowId: string,
  environmentId?: string | undefined,
  idempotencyKey?: string | undefined,
  options?: SuspenseQueryHookOptions<WorkflowsGetQueryData>,
): UseSuspenseQueryResult<WorkflowsGetQueryData, Error> {
  const client = useNovuContext();
  return useSuspenseQuery({
    ...buildWorkflowsGetQuery(
      client,
      workflowId,
      environmentId,
      idempotencyKey,
      options,
    ),
    ...options,
  });
}

export function prefetchWorkflowsGet(
  queryClient: QueryClient,
  client$: NovuCore,
  workflowId: string,
  environmentId?: string | undefined,
  idempotencyKey?: string | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildWorkflowsGetQuery(
      client$,
      workflowId,
      environmentId,
      idempotencyKey,
    ),
  });
}

export function setWorkflowsGetData(
  client: QueryClient,
  queryKeyBase: [
    workflowId: string,
    parameters: {
      environmentId?: string | undefined;
      idempotencyKey?: string | undefined;
    },
  ],
  data: WorkflowsGetQueryData,
): WorkflowsGetQueryData | undefined {
  const key = queryKeyWorkflowsGet(...queryKeyBase);

  return client.setQueryData<WorkflowsGetQueryData>(key, data);
}

export function invalidateWorkflowsGet(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      workflowId: string,
      parameters: {
        environmentId?: string | undefined;
        idempotencyKey?: string | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Workflows", "get", ...queryKeyBase],
  });
}

export function invalidateAllWorkflowsGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Workflows", "get"],
  });
}

export function buildWorkflowsGetQuery(
  client$: NovuCore,
  workflowId: string,
  environmentId?: string | undefined,
  idempotencyKey?: string | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<WorkflowsGetQueryData>;
} {
  return {
    queryKey: queryKeyWorkflowsGet(workflowId, {
      environmentId,
      idempotencyKey,
    }),
    queryFn: async function workflowsGetQueryFn(
      ctx,
    ): Promise<WorkflowsGetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(workflowsGet(
        client$,
        workflowId,
        environmentId,
        idempotencyKey,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyWorkflowsGet(
  workflowId: string,
  parameters: {
    environmentId?: string | undefined;
    idempotencyKey?: string | undefined;
  },
): QueryKey {
  return ["@novu/api", "Workflows", "get", workflowId, parameters];
}
