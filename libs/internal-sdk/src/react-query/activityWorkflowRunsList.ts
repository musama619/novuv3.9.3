/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { NovuCore } from "../core.js";
import { activityWorkflowRunsList } from "../funcs/activityWorkflowRunsList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useNovuContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ActivityWorkflowRunsListQueryData =
  components.GetWorkflowRunsResponseDto;

/**
 * List workflow runs
 *
 * @remarks
 * Retrieve a list of workflow runs with optional filtering and pagination.
 */
export function useActivityWorkflowRunsList(
  request: operations.ActivityControllerGetWorkflowRunsRequest,
  options?: QueryHookOptions<ActivityWorkflowRunsListQueryData>,
): UseQueryResult<ActivityWorkflowRunsListQueryData, Error> {
  const client = useNovuContext();
  return useQuery({
    ...buildActivityWorkflowRunsListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * List workflow runs
 *
 * @remarks
 * Retrieve a list of workflow runs with optional filtering and pagination.
 */
export function useActivityWorkflowRunsListSuspense(
  request: operations.ActivityControllerGetWorkflowRunsRequest,
  options?: SuspenseQueryHookOptions<ActivityWorkflowRunsListQueryData>,
): UseSuspenseQueryResult<ActivityWorkflowRunsListQueryData, Error> {
  const client = useNovuContext();
  return useSuspenseQuery({
    ...buildActivityWorkflowRunsListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchActivityWorkflowRunsList(
  queryClient: QueryClient,
  client$: NovuCore,
  request: operations.ActivityControllerGetWorkflowRunsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildActivityWorkflowRunsListQuery(
      client$,
      request,
    ),
  });
}

export function setActivityWorkflowRunsListData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      limit: number | undefined;
      cursor?: string | undefined;
      workflowIds?: Array<string> | undefined;
      subscriberIds?: Array<string> | undefined;
      transactionIds?: Array<string> | undefined;
      statuses?: Array<operations.QueryParamStatuses> | undefined;
      channels?: Array<string> | undefined;
      topicKey?: string | undefined;
      createdGte?: string | undefined;
      createdLte?: string | undefined;
      idempotencyKey?: string | undefined;
    },
  ],
  data: ActivityWorkflowRunsListQueryData,
): ActivityWorkflowRunsListQueryData | undefined {
  const key = queryKeyActivityWorkflowRunsList(...queryKeyBase);

  return client.setQueryData<ActivityWorkflowRunsListQueryData>(key, data);
}

export function invalidateActivityWorkflowRunsList(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      limit: number | undefined;
      cursor?: string | undefined;
      workflowIds?: Array<string> | undefined;
      subscriberIds?: Array<string> | undefined;
      transactionIds?: Array<string> | undefined;
      statuses?: Array<operations.QueryParamStatuses> | undefined;
      channels?: Array<string> | undefined;
      topicKey?: string | undefined;
      createdGte?: string | undefined;
      createdLte?: string | undefined;
      idempotencyKey?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "WorkflowRuns", "list", ...queryKeyBase],
  });
}

export function invalidateAllActivityWorkflowRunsList(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "WorkflowRuns", "list"],
  });
}

export function buildActivityWorkflowRunsListQuery(
  client$: NovuCore,
  request: operations.ActivityControllerGetWorkflowRunsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ActivityWorkflowRunsListQueryData>;
} {
  return {
    queryKey: queryKeyActivityWorkflowRunsList({
      limit: request.limit,
      cursor: request.cursor,
      workflowIds: request.workflowIds,
      subscriberIds: request.subscriberIds,
      transactionIds: request.transactionIds,
      statuses: request.statuses,
      channels: request.channels,
      topicKey: request.topicKey,
      createdGte: request.createdGte,
      createdLte: request.createdLte,
      idempotencyKey: request.idempotencyKey,
    }),
    queryFn: async function activityWorkflowRunsListQueryFn(
      ctx,
    ): Promise<ActivityWorkflowRunsListQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(activityWorkflowRunsList(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyActivityWorkflowRunsList(
  parameters: {
    limit: number | undefined;
    cursor?: string | undefined;
    workflowIds?: Array<string> | undefined;
    subscriberIds?: Array<string> | undefined;
    transactionIds?: Array<string> | undefined;
    statuses?: Array<operations.QueryParamStatuses> | undefined;
    channels?: Array<string> | undefined;
    topicKey?: string | undefined;
    createdGte?: string | undefined;
    createdLte?: string | undefined;
    idempotencyKey?: string | undefined;
  },
): QueryKey {
  return ["@novu/api", "WorkflowRuns", "list", parameters];
}
