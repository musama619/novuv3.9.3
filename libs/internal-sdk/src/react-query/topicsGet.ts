/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { NovuCore } from "../core.js";
import { topicsGet } from "../funcs/topicsGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useNovuContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type TopicsGetQueryData = operations.TopicsControllerGetTopicResponse;

/**
 * Retrieve a topic
 *
 * @remarks
 * Retrieve a topic by its unique key identifier **topicKey**
 */
export function useTopicsGet(
  topicKey: string,
  idempotencyKey?: string | undefined,
  options?: QueryHookOptions<TopicsGetQueryData>,
): UseQueryResult<TopicsGetQueryData, Error> {
  const client = useNovuContext();
  return useQuery({
    ...buildTopicsGetQuery(
      client,
      topicKey,
      idempotencyKey,
      options,
    ),
    ...options,
  });
}

/**
 * Retrieve a topic
 *
 * @remarks
 * Retrieve a topic by its unique key identifier **topicKey**
 */
export function useTopicsGetSuspense(
  topicKey: string,
  idempotencyKey?: string | undefined,
  options?: SuspenseQueryHookOptions<TopicsGetQueryData>,
): UseSuspenseQueryResult<TopicsGetQueryData, Error> {
  const client = useNovuContext();
  return useSuspenseQuery({
    ...buildTopicsGetQuery(
      client,
      topicKey,
      idempotencyKey,
      options,
    ),
    ...options,
  });
}

export function prefetchTopicsGet(
  queryClient: QueryClient,
  client$: NovuCore,
  topicKey: string,
  idempotencyKey?: string | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildTopicsGetQuery(
      client$,
      topicKey,
      idempotencyKey,
    ),
  });
}

export function setTopicsGetData(
  client: QueryClient,
  queryKeyBase: [
    topicKey: string,
    parameters: { idempotencyKey?: string | undefined },
  ],
  data: TopicsGetQueryData,
): TopicsGetQueryData | undefined {
  const key = queryKeyTopicsGet(...queryKeyBase);

  return client.setQueryData<TopicsGetQueryData>(key, data);
}

export function invalidateTopicsGet(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [topicKey: string, parameters: { idempotencyKey?: string | undefined }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Topics", "get", ...queryKeyBase],
  });
}

export function invalidateAllTopicsGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Topics", "get"],
  });
}

export function buildTopicsGetQuery(
  client$: NovuCore,
  topicKey: string,
  idempotencyKey?: string | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<TopicsGetQueryData>;
} {
  return {
    queryKey: queryKeyTopicsGet(topicKey, { idempotencyKey }),
    queryFn: async function topicsGetQueryFn(ctx): Promise<TopicsGetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(topicsGet(
        client$,
        topicKey,
        idempotencyKey,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyTopicsGet(
  topicKey: string,
  parameters: { idempotencyKey?: string | undefined },
): QueryKey {
  return ["@novu/api", "Topics", "get", topicKey, parameters];
}
